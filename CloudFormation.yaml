AWSTemplateFormatVersion: "2010-09-09"
Description: Launch EC2 with Docker Compose and DocumentDB cluster integration.

Parameters:
  DBUsername:
    Description: The master username for the DocumentDB cluster.
    Type: String
    MinLength: 1
    MaxLength: 63
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    Description: The master password for the DocumentDB cluster.
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    ConstraintDescription: Must be between 8 and 41 characters.

Resources:
  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - EC2Role

  MyEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - DocumentDBCluster
      - DocumentDBInstance1
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2 AMI (update with region-specific AMI)
      KeyName: ec2 # Replace with your EC2 Key Pair name
      IamInstanceProfile: !Ref MyInstanceProfile
      SecurityGroupIds:
        - !Ref MySecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update packages
          yum update -y
          # Install Docker
          amazon-linux-extras enable docker
          yum install docker -y
          service docker start
          usermod -a -G docker ec2-user
          # Install jq for JSON parsing
          yum install -y jq
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          # Create app directory
          mkdir -p /home/ec2-user/app
          cd /home/ec2-user/app

          # Enable IMDSv2 token retrieval
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")

          # Retrieve AWS credentials using IMDSv2
          AWS_ACCESS_KEY_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" "http://169.254.169.254/latest/meta-data/iam/security-credentials/" | xargs -I {} curl -H "X-aws-ec2-metadata-token: $TOKEN" "http://169.254.169.254/latest/meta-data/iam/security-credentials/{}" | jq -r '.AccessKeyId')
          AWS_SECRET_ACCESS_KEY=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" "http://169.254.169.254/latest/meta-data/iam/security-credentials/" | xargs -I {} curl -H "X-aws-ec2-metadata-token: $TOKEN" "http://169.254.169.254/latest/meta-data/iam/security-credentials/{}" | jq -r '.SecretAccessKey')
          AWS_SESSION_TOKEN=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" "http://169.254.169.254/latest/meta-data/iam/security-credentials/" | xargs -I {} curl -H "X-aws-ec2-metadata-token: $TOKEN" "http://169.254.169.254/latest/meta-data/iam/security-credentials/{}" | jq -r '.Token')
          AWS_REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" "http://169.254.169.254/latest/meta-data/placement/region")

          # Export AWS credentials and region
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> /etc/environment
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> /etc/environment
          echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> /etc/environment
          echo "AWS_DEFAULT_REGION=$AWS_REGION" >> /etc/environment
          echo "BUCKET_NAME=amazonabucket5411" >> /etc/environment
          source /etc/environment

          # Write the docker-compose.yml
          cat <<EOF > docker-compose.yml
          version: '3.8'
          services:
            backend:
              image: ayushi9799/amazona-backend
              ports:
                - "4000:4000"
              environment:
                - DOCUMENTDB_URI=${DocumentDBCluster.Endpoint}:27017
                - DOCUMENTDB_USER=${DBUsername}
                - DOCUMENTDB_PASSWORD=${DBPassword}
                - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                - AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
                - AWS_DEFAULT_REGION=$AWS_REGION
                - BUCKET_NAME=amazonabucket5411
            frontend:
              image: ayushi9799/amazona-frontend
              ports:
                - "3000:3000"
              environment:
                - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                - AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
                - AWS_DEFAULT_REGION=$AWS_REGION
          EOF

          # Run Docker Compose
          sudo docker-compose up -d

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Docker Compose services and HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # Allow SSH (update this to restrict access)
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0 # Allow access to frontend
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: 0.0.0.0/0 # Allow access to backend
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allow HTTP access

  DocumentDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DocumentDB cluster
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !GetAtt MySecurityGroup.GroupId

  DocumentDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      EngineVersion: "4.0.0" # Replace with your desired version
      VpcSecurityGroupIds:
        - !GetAtt DocumentDBSecurityGroup.GroupId # Correctly reference security group ID

  DocumentDBInstance1:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: db.r5.large # Replace with your desired instance type

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "amazonabucket5411"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: 
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - "/uploads/*"

Outputs:
  InstancePublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp
    Export:
      Name: InstancePublicIP

  DocumentDBClusterEndpoint:
    Description: DocumentDB cluster connection endpoint
    Value: !GetAtt DocumentDBCluster.Endpoint
    Export:
      Name: DocumentDBClusterEndpoint
